/**
 ******************************************************************************
 * @file       telemetry.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     Vladimir Ermakov, Copyright (C) 2013.
 * @brief The UAVTalk protocol
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TELEMETRY_H
#define TELEMETRY_H

#include <boost/pending/queue.hpp>
#include <boost/asio.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include "uavtalk.h"
#include "uavobjectmanager.h"
#include "gcstelemetrystats.h"

namespace openpilot
{

class ObjectTransactionInfo {
public:
	ObjectTransactionInfo(boost::asio::io_service &io);

	UAVObject *obj;
	bool allInstances;
	bool objRequest;
	int32_t retriesRemaining;
	bool acked;
	boost::asio::deadline_timer timer;
};

class Telemetry {
public:
	typedef struct {
		uint32_t txBytes;
		uint32_t rxBytes;
		uint32_t txObjectBytes;
		uint32_t rxObjectBytes;
		uint32_t rxObjects;
		uint32_t txObjects;
		uint32_t txErrors;
		uint32_t rxErrors;
		uint32_t txRetries;
	} TelemetryStats;

	Telemetry(boost::asio::io_service &io, UAVTalk *utalk, UAVObjectManager *objMngr);
	~Telemetry();
	TelemetryStats getStats();
	void resetStats();

private:
	// Constants
	static const int REQ_TIMEOUT_MS = 250;
	static const int MAX_RETRIES    = 2;
	static const int MAX_UPDATE_PERIOD_MS = 1000;
	static const int MIN_UPDATE_PERIOD_MS = 1;
	static const int MAX_QUEUE_SIZE = 20;

	// Types
	/** Events generated by objects
	 */
	typedef enum {
		EV_NONE             = 0x00, /** No event */
		EV_UNPACKED         = 0x01, /** Object data updated by unpacking */
		EV_UPDATED          = 0x02, /** Object data updated by changing the data structure */
		EV_UPDATED_MANUAL   = 0x04, /** Object update event manually generated */
		EV_UPDATED_PERIODIC = 0x08, /** Object update event generated by timer */
		EV_UPDATE_REQ       = 0x10  /** Request to update object data */
	} EventMask;

	typedef struct {
		UAVObject *obj;
		int32_t    updatePeriodMs; /** Update period in ms or 0 if no periodic updates are needed */
		int32_t    timeToNextUpdateMs; /** Time delay to the next update */
	} ObjectTimeInfo;

	typedef struct {
		UAVObject *obj;
		EventMask event;
		bool allInstances;
	} ObjectQueueInfo;

	// Variables
	boost::asio::io_service &io_service;
	UAVObjectManager *objMngr;
	UAVTalk *utalk;
	GCSTelemetryStats *gcsStatsObj;
	std::vector<ObjectTimeInfo> objList;
	boost::queue<ObjectQueueInfo> objQueue;
	boost::queue<ObjectQueueInfo> objPriorityQueue;
	std::map<uint32_t, ObjectTransactionInfo *> transMap;
	boost::recursive_mutex mutex;
	boost::asio::deadline_timer updateTimer;
	int32_t timeToNextUpdateMs;
	uint32_t txErrors;
	uint32_t txRetries;

	// Methods
	void registerObject(UAVObject *obj);
	void addObject(UAVObject *obj);
	void setUpdatePeriod(UAVObject *obj, int32_t periodMs);
	void connectToObjectInstances(UAVObject *obj, uint32_t eventMask);
	void updateObject(UAVObject *obj, uint32_t eventMask);
	void processObjectUpdates(UAVObject *obj, EventMask event, bool allInstances, bool priority);
	void processObjectTransaction(ObjectTransactionInfo *transInfo);
	void processObjectQueue();

private: // slots:
	void objectUpdatedAuto(UAVObject *obj);
	void objectUpdatedManual(UAVObject *obj);
	void objectUpdatedPeriodic(UAVObject *obj);
	void objectUnpacked(UAVObject *obj);
	void updateRequested(UAVObject *obj);
	void newObject(UAVObject *obj);
	void newInstance(UAVObject *obj);
	void transactionCompleted(UAVObject *obj, bool success);

	// timer handlers
	void processPeriodicUpdates(boost::system::error_code ec);
	void transactionTimeout(boost::system::error_code ec, ObjectTransactionInfo *info);
};

} // namespace openpilot

#endif // TELEMETRY_H
